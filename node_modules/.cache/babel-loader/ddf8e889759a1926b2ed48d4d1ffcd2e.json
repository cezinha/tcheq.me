{"ast":null,"code":"import map from 'lodash.map';\nimport reduce from 'lodash.reduce';\nimport filter from 'lodash.filter';\nimport min from 'lodash.min';\nimport max from 'lodash.max';\nimport isNumber from 'lodash.isnumber';\nimport L from 'leaflet';\nimport { MapLayer } from 'react-leaflet';\n\nfunction isInvalid(num) {\n  return !isNumber(num) && !num;\n}\n\nfunction isValid(num) {\n  return !isInvalid(num);\n}\n\nfunction isValidLatLngArray(arr) {\n  return filter(arr, isValid).length === arr.length;\n}\n\nfunction isInvalidLatLngArray(arr) {\n  return !isValidLatLngArray(arr);\n}\n\nfunction safeRemoveLayer(leafletMap, el) {\n  const {\n    overlayPane\n  } = leafletMap.getPanes();\n\n  if (overlayPane && overlayPane.contains(el)) {\n    overlayPane.removeChild(el);\n  }\n}\n\nfunction shouldIgnoreLocation(loc) {\n  return isInvalid(loc.lng) || isInvalid(loc.lat);\n}\n\nexport default class HeatmapLayer extends MapLayer {\n  /*static propTypes = {\n    points: PropTypes.array.isRequired,\n    longitudeExtractor: PropTypes.func.isRequired,\n    latitudeExtractor: PropTypes.func.isRequired,\n    intensityExtractor: PropTypes.func.isRequired,\n    fitBoundsOnLoad: PropTypes.bool,\n    fitBoundsOnUpdate: PropTypes.bool,\n    onStatsUpdate: PropTypes.func,\n    // props controlling heatmap generation \n    max: PropTypes.number,\n    radius: PropTypes.number,\n    maxZoom: PropTypes.number,\n    minOpacity: PropTypes.number,\n    blur: PropTypes.number,\n    gradient: PropTypes.object\n  };\n  */\n  createLeafletElement() {\n    return null;\n  }\n\n  componentDidMount() {\n    const canAnimate = this.props.leaflet.map.options.zoomAnimation && L.Browser.any3d;\n    const zoomClass = `leaflet-zoom-${canAnimate ? 'animated' : 'hide'}`;\n    const mapSize = this.props.leaflet.map.getSize();\n    const transformProp = L.DomUtil.testProp(['transformOrigin', 'WebkitTransformOrigin', 'msTransformOrigin']);\n    const tProp = typeof transformProp == \"string\" ? transformProp : '';\n\n    var _el = L.DomUtil.create('canvas', zoomClass);\n\n    _el.style[tProp] = '50% 50%';\n    _el.style.width = mapSize.x + 'px';\n    _el.style.height = mapSize.y + 'px';\n    const el = _el;\n    const Heatmap = L.Layer.extend({\n      onAdd: leafletMap => leafletMap.getPanes().overlayPane.appendChild(el),\n      addTo: leafletMap => {\n        leafletMap.addLayer(this);\n        return this;\n      },\n      onRemove: leafletMap => safeRemoveLayer(leafletMap, el)\n    });\n    this.leafletElement = new Heatmap();\n    super.componentDidMount(); //var _heatmap = simpleheat(_el);\n\n    this.reset();\n    /*if (this.props.fitBoundsOnLoad) {\n      this.fitBounds();\n    }*/\n\n    this.attachEvents();\n    this.updateHeatmapProps(this.getHeatmapProps(this.props));\n  }\n\n  getMax(props) {\n    return props.max || 3.0;\n  }\n\n  getRadius(props) {\n    return props.radius || 30;\n  }\n\n  getMaxZoom(props) {\n    return props.maxZoom || 18;\n  }\n\n  getMinOpacity(props) {\n    return props.minOpacity || 0.01;\n  }\n\n  getBlur(props) {\n    return props.blur || 15;\n  }\n\n  getHeatmapProps(props) {\n    return {\n      minOpacity: this.getMinOpacity(props),\n      maxZoom: this.getMaxZoom(props),\n      radius: this.getRadius(props),\n      blur: this.getBlur(props),\n      max: this.getMax(props),\n      gradient: props.gradient\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const currentProps = this.props;\n    const nextHeatmapProps = this.getHeatmapProps(nextProps);\n    this.updateHeatmapGradient(nextHeatmapProps.gradient);\n    const hasRadiusUpdated = nextHeatmapProps.radius !== currentProps.radius;\n    const hasBlurUpdated = nextHeatmapProps.blur !== currentProps.blur;\n\n    if (hasRadiusUpdated || hasBlurUpdated) {\n      this.updateHeatmapRadius(nextHeatmapProps.radius, nextHeatmapProps.blur);\n    }\n\n    if (nextHeatmapProps.max !== currentProps.max) {\n      this.updateHeatmapMax(nextHeatmapProps.max);\n    }\n  }\n  /**\n   * Update various heatmap properties like radius, gradient, and max\n   */\n\n\n  updateHeatmapProps(props) {\n    this.updateHeatmapRadius(props.radius, props.blur);\n    this.updateHeatmapGradient(props.gradient);\n    this.updateHeatmapMax(props.max);\n  }\n  /**\n   * Update the heatmap's radius and blur (blur is optional)\n   */\n\n\n  updateHeatmapRadius(radius, blur) {\n    if (radius) {\n      this._heatmap.radius(radius, blur);\n    }\n  }\n  /**\n   * Update the heatmap's gradient\n   */\n\n\n  updateHeatmapGradient(gradient) {\n    if (gradient) {\n      this._heatmap.gradient(gradient);\n    }\n  }\n  /**\n   * Update the heatmap's maximum\n   */\n\n\n  updateHeatmapMax(maximum) {\n    if (maximum) {\n      this._heatmap.max(maximum);\n    }\n  }\n\n  componentWillUnmount() {\n    safeRemoveLayer(this.props.leaflet.map, this._el);\n  }\n\n  fitBounds() {\n    const points = this.props.points;\n    const lngs = map(points, this.props.longitudeExtractor);\n    const lats = map(points, this.props.latitudeExtractor);\n    const ne = {\n      lng: max(lngs),\n      lat: max(lats)\n    };\n    const sw = {\n      lng: min(lngs),\n      lat: min(lats)\n    };\n\n    if (shouldIgnoreLocation(ne) || shouldIgnoreLocation(sw)) {\n      return;\n    }\n\n    this.props.leaflet.map.fitBounds(L.latLngBounds(L.latLng(sw), L.latLng(ne)));\n  }\n\n  componentDidUpdate() {\n    this.props.leaflet.map.invalidateSize();\n\n    if (this.props.fitBoundsOnUpdate) {\n      this.fitBounds();\n    }\n\n    this.reset();\n  }\n\n  shouldComponentUpdate() {\n    return true;\n  }\n\n  attachEvents() {\n    const leafletMap = this.props.leaflet.map;\n    leafletMap.on('viewreset', () => this.reset());\n    leafletMap.on('moveend', () => this.reset());\n\n    if (leafletMap.options.zoomAnimation && L.Browser.any3d) {\n      leafletMap.on('zoomanim', this._animateZoom, this);\n    }\n  }\n\n  _animateZoom(e) {\n    const scale = this.props.leaflet.map.getZoomScale(e.zoom);\n\n    const offset = this.props.leaflet.map._getCenterOffset(e.center)._multiplyBy(-scale).subtract(this.props.leaflet.map._getMapPanePos());\n\n    if (L.DomUtil.setTransform) {\n      L.DomUtil.setTransform(this._el, offset, scale);\n    } else {\n      this._el.style[L.DomUtil.TRANSFORM] = `${L.DomUtil.getTranslateString(offset)} scale(${scale})`;\n    }\n  }\n\n  reset() {\n    const topLeft = this.props.leaflet.map.containerPointToLayerPoint([0, 0]);\n    L.DomUtil.setPosition(this._el, topLeft);\n    const size = this.props.leaflet.map.getSize();\n\n    if (this._heatmap._width !== size.x) {\n      this._el.width = this._heatmap._width = size.x;\n    }\n\n    if (this._heatmap._height !== size.y) {\n      this._el.height = this._heatmap._height = size.y;\n    }\n\n    if (this._heatmap && !this._frame && !this.props.leaflet.map._animating) {\n      this._frame = L.Util.requestAnimFrame(this.redraw, this);\n    }\n\n    this.redraw();\n  }\n\n  redraw() {\n    const r = this._heatmap._r;\n    const size = this.props.leaflet.map.getSize();\n    const maxIntensity = this.props.max === undefined ? 1 : this.getMax(this.props);\n    const maxZoom = this.props.maxZoom === undefined ? this.props.leaflet.map.getMaxZoom() : this.getMaxZoom(this.props);\n    const v = 1 / Math.pow(2, Math.max(0, Math.min(maxZoom - this.props.leaflet.map.getZoom(), 12)) / 2);\n    const cellSize = r / 2;\n\n    const panePos = this.props.leaflet.map._getMapPanePos();\n\n    const offsetX = panePos.x % cellSize;\n    const offsetY = panePos.y % cellSize;\n    const getLat = this.props.latitudeExtractor;\n    const getLng = this.props.longitudeExtractor;\n    const getIntensity = this.props.intensityExtractor;\n\n    const inBounds = (p, bounds) => bounds.contains(p);\n\n    const filterUndefined = row => filter(row, c => c !== undefined);\n\n    const roundResults = results => reduce(results, (result, row) => map(filterUndefined(row), cell => [Math.round(cell[0]), Math.round(cell[1]), Math.min(cell[2], maxIntensity), cell[3]]).concat(result), []);\n\n    const accumulateInGrid = (points, leafletMap, bounds) => reduce(points, (grid, point) => {\n      const latLng = [getLat(point), getLng(point)];\n\n      if (isInvalidLatLngArray(latLng)) {\n        //skip invalid points\n        return grid;\n      }\n\n      const p = leafletMap.latLngToContainerPoint(latLng);\n\n      if (!inBounds(p, bounds)) {\n        return grid;\n      }\n\n      const x = Math.floor((p.x - offsetX) / cellSize) + 2;\n      const y = Math.floor((p.y - offsetY) / cellSize) + 2;\n      grid[y] = grid[y] || [];\n      const cell = grid[y][x];\n      const alt = getIntensity(point);\n      const k = alt * v;\n\n      if (!cell) {\n        grid[y][x] = [p.x, p.y, k, 1];\n      } else {\n        cell[0] = (cell[0] * cell[2] + p.x * k) / (cell[2] + k); // x\n\n        cell[1] = (cell[1] * cell[2] + p.y * k) / (cell[2] + k); // y\n\n        cell[2] += k; // accumulated intensity value\n\n        cell[3] += 1;\n      }\n\n      return grid;\n    }, []);\n\n    const getBounds = () => new L.Bounds(L.point([-r, -r]), size.add([r, r]));\n\n    const getDataForHeatmap = (points, leafletMap) => roundResults(accumulateInGrid(points, leafletMap, getBounds(leafletMap)));\n\n    const data = getDataForHeatmap(this.props.points, this.props.leaflet.map);\n\n    this._heatmap.clear();\n\n    this._heatmap.data(data).draw(this.getMinOpacity(this.props));\n\n    this._frame = null;\n\n    if (this.props.onStatsUpdate && this.props.points && this.props.points.length > 0) {\n      this.props.onStatsUpdate(reduce(data, (stats, point) => {\n        stats.max = point[3] > stats.max ? point[3] : stats.max;\n        stats.min = point[3] < stats.min ? point[3] : stats.min;\n        return stats;\n      }, {\n        min: Infinity,\n        max: -Infinity\n      }));\n    }\n  }\n\n  render() {\n    return null;\n  }\n\n}\n;","map":{"version":3,"sources":["/home/cuemura/Documents/tcheqme_web/src/HeatmapLayer.ts"],"names":["map","reduce","filter","min","max","isNumber","L","MapLayer","isInvalid","num","isValid","isValidLatLngArray","arr","length","isInvalidLatLngArray","safeRemoveLayer","leafletMap","el","overlayPane","getPanes","contains","removeChild","shouldIgnoreLocation","loc","lng","lat","HeatmapLayer","createLeafletElement","componentDidMount","canAnimate","props","leaflet","options","zoomAnimation","Browser","any3d","zoomClass","mapSize","getSize","transformProp","DomUtil","testProp","tProp","_el","create","style","width","x","height","y","Heatmap","Layer","extend","onAdd","appendChild","addTo","addLayer","onRemove","leafletElement","reset","attachEvents","updateHeatmapProps","getHeatmapProps","getMax","getRadius","radius","getMaxZoom","maxZoom","getMinOpacity","minOpacity","getBlur","blur","gradient","componentWillReceiveProps","nextProps","currentProps","nextHeatmapProps","updateHeatmapGradient","hasRadiusUpdated","hasBlurUpdated","updateHeatmapRadius","updateHeatmapMax","_heatmap","maximum","componentWillUnmount","fitBounds","points","lngs","longitudeExtractor","lats","latitudeExtractor","ne","sw","latLngBounds","latLng","componentDidUpdate","invalidateSize","fitBoundsOnUpdate","shouldComponentUpdate","on","_animateZoom","e","scale","getZoomScale","zoom","offset","_getCenterOffset","center","_multiplyBy","subtract","_getMapPanePos","setTransform","TRANSFORM","getTranslateString","topLeft","containerPointToLayerPoint","setPosition","size","_width","_height","_frame","_animating","Util","requestAnimFrame","redraw","r","_r","maxIntensity","undefined","v","Math","pow","getZoom","cellSize","panePos","offsetX","offsetY","getLat","getLng","getIntensity","intensityExtractor","inBounds","p","bounds","filterUndefined","row","c","roundResults","results","result","cell","round","concat","accumulateInGrid","grid","point","latLngToContainerPoint","floor","alt","k","getBounds","Bounds","add","getDataForHeatmap","data","clear","draw","onStatsUpdate","stats","Infinity","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport map from 'lodash.map';\nimport reduce from 'lodash.reduce';\nimport filter from 'lodash.filter';\nimport min from 'lodash.min';\nimport max from 'lodash.max';\nimport isNumber from 'lodash.isnumber';\nimport L from 'leaflet';\nimport { MapLayer, withLeaflet } from 'react-leaflet';\nimport simpleheat from 'simpleheat';\nimport PropTypes from 'prop-types';\n\nexport type LngLat = {\n  lng: number;\n  lat: number;\n}\n\nexport type Point = {\n  x: number;\n  y: number;\n}\n\nexport type Bounds = {\n  contains: (latLng: LngLat) => boolean;\n}\n\nexport type Pane = {\n  appendChild: (element: Object) => void;\n  removeChild: (element: Object) => void;\n  contains: (element: Object) => boolean;\n}\n\nexport type Panes = {\n  overlayPane: Pane;\n}\n\nexport type Map = {\n  layerPointToLatLng: (lngLat: Point) => LngLat;\n  latLngToLayerPoint: (lngLat: LngLat) => Point;\n  on: (event: string, handler: () => void) => void;\n  getBounds: () => Bounds;\n  getPanes: () => Panes;\n  invalidateSize: () => void;\n  options: Object;\n}\n\nexport type LeafletZoomEvent = {\n  zoom: number;\n  center: Object;\n}\n\nfunction isInvalid(num: number): boolean {\n  return !isNumber(num) && !num;\n}\n\nfunction isValid(num: number): boolean {\n  return !isInvalid(num);\n}\n\nfunction isValidLatLngArray(arr: Array<number>): boolean {\n  return filter(arr, isValid).length === arr.length;\n}\n\nfunction isInvalidLatLngArray(arr: Array<number>): boolean {\n  return !isValidLatLngArray(arr);\n}\n\nfunction safeRemoveLayer(leafletMap: Map, el): void {\n  const { overlayPane } = leafletMap.getPanes();\n  if (overlayPane && overlayPane.contains(el)) {\n    overlayPane.removeChild(el);\n  }\n}\n\nfunction shouldIgnoreLocation(loc: LngLat): boolean {\n  return isInvalid(loc.lng) || isInvalid(loc.lat);\n}\n\ntype HeatmapLayerState = {\n  leaflet: any,\n  points: Array,\n  longitudeExtractor: Function,\n  latitudeExtractor: Function,\n  intensityExtractor: Function,\n  fitBoundsOnLoad?: Boolean,\n  fitBoundsOnUpdate?: Boolean,\n  onStatsUpdate?: Function,\n  /* props controlling heatmap generation */\n  max?: Number,\n  radius?: Number,\n  maxZoom?: Number,\n  minOpacity?: Number,\n  blur?: Number,\n  gradient?: Object\n}\nexport default class HeatmapLayer extends MapLayer<{}, HeatmapLayerState> {\n  /*static propTypes = {\n    points: PropTypes.array.isRequired,\n    longitudeExtractor: PropTypes.func.isRequired,\n    latitudeExtractor: PropTypes.func.isRequired,\n    intensityExtractor: PropTypes.func.isRequired,\n    fitBoundsOnLoad: PropTypes.bool,\n    fitBoundsOnUpdate: PropTypes.bool,\n    onStatsUpdate: PropTypes.func,\n    // props controlling heatmap generation \n    max: PropTypes.number,\n    radius: PropTypes.number,\n    maxZoom: PropTypes.number,\n    minOpacity: PropTypes.number,\n    blur: PropTypes.number,\n    gradient: PropTypes.object\n  };\n*/\n  createLeafletElement() {\n    return null;\n  }\n\n  componentDidMount(): void {\n    const canAnimate = this.props.leaflet.map.options.zoomAnimation && L.Browser.any3d;\n    const zoomClass = `leaflet-zoom-${canAnimate ? 'animated' : 'hide'}`;\n    const mapSize = this.props.leaflet.map.getSize();\n    const transformProp = L.DomUtil.testProp(\n      ['transformOrigin', 'WebkitTransformOrigin', 'msTransformOrigin']\n    );\n    const tProp : string = (typeof transformProp == \"string\") ? transformProp : '';\n\n    var _el = L.DomUtil.create('canvas', zoomClass);\n    _el.style[tProp] = '50% 50%';\n    _el.style.width = mapSize.x + 'px';\n    _el.style.height = mapSize.y + 'px';\n\n    const el = _el;\n\n    const Heatmap = L.Layer.extend({\n      onAdd: (leafletMap) => leafletMap.getPanes().overlayPane.appendChild(el),\n      addTo: (leafletMap) => {\n        leafletMap.addLayer(this);\n        return this;\n      },\n      onRemove: (leafletMap) => safeRemoveLayer(leafletMap, el)\n    });\n\n    this.leafletElement = new Heatmap();\n    super.componentDidMount();\n    //var _heatmap = simpleheat(_el);\n    this.reset();\n\n    /*if (this.props.fitBoundsOnLoad) {\n      this.fitBounds();\n    }*/\n    this.attachEvents();\n    this.updateHeatmapProps(this.getHeatmapProps(this.props));\n  }\n\n  getMax(props) {\n    return props.max || 3.0;\n  }\n\n  getRadius(props) {\n    return props.radius || 30;\n  }\n\n  getMaxZoom(props) {\n    return props.maxZoom || 18;\n  }\n\n  getMinOpacity(props) {\n    return props.minOpacity || 0.01;\n  }\n\n  getBlur(props) {\n    return props.blur || 15;\n  }\n\n  getHeatmapProps(props) {\n    return {\n      minOpacity: this.getMinOpacity(props),\n      maxZoom: this.getMaxZoom(props),\n      radius: this.getRadius(props),\n      blur: this.getBlur(props),\n      max: this.getMax(props),\n      gradient: props.gradient\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Object): void {\n    const currentProps = this.props;\n    const nextHeatmapProps = this.getHeatmapProps(nextProps);\n\n    this.updateHeatmapGradient(nextHeatmapProps.gradient);\n\n    const hasRadiusUpdated = nextHeatmapProps.radius !== currentProps.radius;\n    const hasBlurUpdated = nextHeatmapProps.blur !== currentProps.blur;\n\n    if (hasRadiusUpdated || hasBlurUpdated) {\n      this.updateHeatmapRadius(nextHeatmapProps.radius, nextHeatmapProps.blur);\n    }\n\n    if (nextHeatmapProps.max !== currentProps.max) {\n      this.updateHeatmapMax(nextHeatmapProps.max);\n    }\n\n  }\n\n  /**\n   * Update various heatmap properties like radius, gradient, and max\n   */\n  updateHeatmapProps(props: Object) {\n    this.updateHeatmapRadius(props.radius, props.blur);\n    this.updateHeatmapGradient(props.gradient);\n    this.updateHeatmapMax(props.max);\n  }\n\n  /**\n   * Update the heatmap's radius and blur (blur is optional)\n   */\n  updateHeatmapRadius(radius: number, blur?: number): void {\n    if (radius) {\n      this._heatmap.radius(radius, blur);\n    }\n  }\n\n  /**\n   * Update the heatmap's gradient\n   */\n  updateHeatmapGradient(gradient: Object): void {\n    if (gradient) {\n      this._heatmap.gradient(gradient);\n    }\n  }\n\n  /**\n   * Update the heatmap's maximum\n   */\n  updateHeatmapMax(maximum: number): void {\n    if (maximum) {\n      this._heatmap.max(maximum);\n    }\n  }\n\n  componentWillUnmount(): void {\n    safeRemoveLayer(this.props.leaflet.map, this._el);\n  }\n\n  fitBounds(): void {\n    const points = this.props.points;\n    const lngs = map(points, this.props.longitudeExtractor);\n    const lats = map(points, this.props.latitudeExtractor);\n    const ne = { lng: max(lngs), lat: max(lats) };\n    const sw = { lng: min(lngs), lat: min(lats) };\n\n    if (shouldIgnoreLocation(ne) || shouldIgnoreLocation(sw)) {\n      return;\n    }\n\n    this.props.leaflet.map.fitBounds(L.latLngBounds(L.latLng(sw), L.latLng(ne)));\n  }\n\n  componentDidUpdate(): void {\n    this.props.leaflet.map.invalidateSize();\n    if (this.props.fitBoundsOnUpdate) {\n      this.fitBounds();\n    }\n    this.reset();\n  }\n\n  shouldComponentUpdate(): boolean {\n    return true;\n  }\n\n  attachEvents(): void {\n    const leafletMap: Map = this.props.leaflet.map;\n    leafletMap.on('viewreset', () => this.reset());\n    leafletMap.on('moveend', () => this.reset());\n    if (leafletMap.options.zoomAnimation && L.Browser.any3d) {\n      leafletMap.on('zoomanim', this._animateZoom, this);\n    }\n  }\n\n\n  _animateZoom(e: LeafletZoomEvent): void {\n    const scale = this.props.leaflet.map.getZoomScale(e.zoom);\n    const offset = this.props.leaflet.map\n                      ._getCenterOffset(e.center)\n                      ._multiplyBy(-scale)\n                      .subtract(this.props.leaflet.map._getMapPanePos());\n\n    if (L.DomUtil.setTransform) {\n      L.DomUtil.setTransform(this._el, offset, scale);\n    } else {\n      this._el.style[L.DomUtil.TRANSFORM] =\n          `${L.DomUtil.getTranslateString(offset)} scale(${scale})`;\n    }\n  }\n\n  reset(): void {\n    const topLeft = this.props.leaflet.map.containerPointToLayerPoint([0, 0]);\n    L.DomUtil.setPosition(this._el, topLeft);\n\n    const size = this.props.leaflet.map.getSize();\n\n    if (this._heatmap._width !== size.x) {\n      this._el.width = this._heatmap._width = size.x;\n    }\n    if (this._heatmap._height !== size.y) {\n      this._el.height = this._heatmap._height = size.y;\n    }\n\n    if (this._heatmap && !this._frame && !this.props.leaflet.map._animating) {\n      this._frame = L.Util.requestAnimFrame(this.redraw, this);\n    }\n\n    this.redraw();\n  }\n\n  redraw(): void {\n    const r = this._heatmap._r;\n    const size = this.props.leaflet.map.getSize();\n\n    const maxIntensity = this.props.max === undefined\n                            ? 1\n                            : this.getMax(this.props);\n\n    const maxZoom = this.props.maxZoom === undefined\n                        ? this.props.leaflet.map.getMaxZoom()\n                        : this.getMaxZoom(this.props);\n\n    const v = 1 / Math.pow(\n      2,\n      Math.max(0, Math.min(maxZoom - this.props.leaflet.map.getZoom(), 12)) / 2\n    );\n\n    const cellSize = r / 2;\n    const panePos = this.props.leaflet.map._getMapPanePos();\n    const offsetX = panePos.x % cellSize;\n    const offsetY = panePos.y % cellSize;\n    const getLat = this.props.latitudeExtractor;\n    const getLng = this.props.longitudeExtractor;\n    const getIntensity = this.props.intensityExtractor;\n\n    const inBounds = (p, bounds) => bounds.contains(p);\n\n    const filterUndefined = (row) => filter(row, c => c !== undefined);\n\n    const roundResults = (results) => reduce(results, (result, row) =>\n      map(filterUndefined(row), (cell) => [\n        Math.round(cell[0]),\n        Math.round(cell[1]),\n        Math.min(cell[2], maxIntensity),\n        cell[3]\n      ]).concat(result),\n      []\n    );\n\n    const accumulateInGrid = (points, leafletMap, bounds) => reduce(points, (grid, point) => {\n      const latLng = [getLat(point), getLng(point)];\n      if (isInvalidLatLngArray(latLng)) { //skip invalid points\n        return grid;\n      }\n\n      const p = leafletMap.latLngToContainerPoint(latLng);\n\n      if (!inBounds(p, bounds)) {\n        return grid;\n      }\n\n      const x = Math.floor((p.x - offsetX) / cellSize) + 2;\n      const y = Math.floor((p.y - offsetY) / cellSize) + 2;\n\n      grid[y] = grid[y] || [];\n      const cell = grid[y][x];\n\n      const alt = getIntensity(point);\n      const k = alt * v;\n\n      if (!cell) {\n        grid[y][x] = [p.x, p.y, k, 1];\n      } else {\n        cell[0] = (cell[0] * cell[2] + p.x * k) / (cell[2] + k); // x\n        cell[1] = (cell[1] * cell[2] + p.y * k) / (cell[2] + k); // y\n        cell[2] += k; // accumulated intensity value\n        cell[3] += 1;\n      }\n\n      return grid;\n    }, []);\n\n    const getBounds = () => new L.Bounds(L.point([-r, -r]), size.add([r, r]));\n\n    const getDataForHeatmap = (points, leafletMap) => roundResults(\n        accumulateInGrid(\n          points,\n          leafletMap,\n          getBounds(leafletMap)\n        )\n      );\n\n    const data = getDataForHeatmap(this.props.points, this.props.leaflet.map);\n\n    this._heatmap.clear();\n    this._heatmap.data(data).draw(this.getMinOpacity(this.props));\n\n    this._frame = null;\n\n    if (this.props.onStatsUpdate && this.props.points && this.props.points.length > 0) {\n      this.props.onStatsUpdate(\n        reduce(data, (stats, point) => {\n          stats.max = point[3] > stats.max ? point[3] : stats.max;\n          stats.min = point[3] < stats.min ? point[3] : stats.min;\n          return stats;\n        }, { min: Infinity, max: -Infinity })\n      );\n    }\n  }\n\n\n  render(): React.Element {\n    return null;\n  }\n\n};"]},"metadata":{},"sourceType":"module"}