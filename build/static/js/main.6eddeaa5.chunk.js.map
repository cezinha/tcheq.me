{"version":3,"sources":["Home.tsx","About.tsx","MyLocation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LeafletMap","addressPoints","data","features","map","rat","location","geometry","coordinates","length","reverse","push","h","window","innerHeight","Map","center","lat","lng","zoom","style","height","TileLayer","url","attribution","fitBoundsOnLoad","fitBoundsOnUpdate","points","longitudeExtractor","m","latitudeExtractor","intensityExtractor","parseFloat","minOpacity","React","Component","Home","id","Container","Row","Col","className","About","EventsExample","props","state","mapRef","handleClick","leafletElement","locate","locateUser","handleLocationFound","e","setState","hasLocation","latlng","this","marker","Marker","position","Popup","onLocationfound","ref","MyLocation","App","Navbar","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6eddeaa5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Map, TileLayer } from 'react-leaflet'\nimport {\n  Container,\n  Row,\n  Col\n} from 'react-bootstrap';\nimport HeatmapLayer from \"react-leaflet-heatmap-layer/lib/HeatmapLayer\";\nimport data from \"./rodents.json\";\n\nclass LeafletMap extends React.Component<{}> {\n  render() {\n    const position = { lat: 42.35, lng: -71.08 };\n    var addressPoints = data.features.map(function(rat) {\n      // the heatmap plugin wants an array of each location\n      var location = rat.geometry.coordinates;\n      if (location.length === 2) {\n        location.reverse();\n        location.push(0.5);\n      }\n      return location; // e.g. [50.5, 30.5, 0.2], // lat, lng, intensity\n    });\n\n    let h = window.innerHeight - 56 - 121;\n    return (\n      <Map center={position} zoom={13} style={{height: h +'px'}}>\n        <TileLayer\n          url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        <HeatmapLayer\n          fitBoundsOnLoad\n          fitBoundsOnUpdate\n          points={addressPoints}\n          longitudeExtractor={m => m[1]}\n          latitudeExtractor={m => m[0]}\n          intensityExtractor={m => parseFloat(m[2])}\n          minOpacity={0.1}\n          />\n      </Map>\n    );\n  }\n}\nfunction Home() {\n  return (\n    <div id=\"home-page\">\n      <Container>\n        <Row>\n          <Col>\n            <header>\n              <h1 className=\"display-4\">Testing page</h1>\n              <p className=\"lead\">First page for project</p>\n            </header>\n          </Col>\n        </Row>\n      </Container>\n      <LeafletMap />\n    </div>\n  );\n}\n\nexport default Home;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Container,\n  Row,\n  Col,\n} from 'react-bootstrap';\n\nfunction About() {\n  return (\n    <div id=\"about-page\">\n      <Container>\n        <Row>\n          <Col>\n            <header>\n              <h1 className=\"display-4\">About page</h1>\n              <p className=\"lead\">About page for project</p>\n            </header>\n            <div>\n\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport {\n  Container,\n  Row,\n  Col\n} from 'react-bootstrap';\nimport { LocationEvent } from 'leaflet';\n\ninterface IState {\n  hasLocation: boolean;\n  latlng: {\n    lat: number,\n    lng: number,\n  };\n};\n\ninterface IProps {};\n\nclass EventsExample extends Component<IProps, IState> {\n  state: IState;\n\n  constructor(props:IProps) {\n    super(props);\n\n    this.state = {\n      hasLocation: false,\n      latlng: {\n        lat: 51.505,\n        lng: -0.09,\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.locateUser();\n  }\n\n  mapRef: Map;\n\n  handleClick = () => {\n    const map = this.mapRef;\n    if (map != null) {\n      map.leafletElement.locate()\n    }\n  }\n\n  locateUser = () => {\n    const map = this.mapRef;\n    if (map != null) {\n      map.leafletElement.locate()\n    }\n  }\n\n  handleLocationFound = (e: LocationEvent) => {\n    this.setState({\n      hasLocation: true,\n      latlng: e.latlng,\n    });\n  }\n\n  render() {\n    let h = window.innerHeight - 56 - 121;\n    const marker = this.state.hasLocation ? (\n    <Marker position={this.state.latlng}>\n      <Popup>You are here</Popup>\n    </Marker>\n    ) : null\n\n    return (\n      <Map center={this.state.latlng} zoom={16} style={{height: h +'px'}} onLocationfound={this.handleLocationFound} ref={mapRef => this.mapRef = mapRef}>\n        <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {marker}\n      </Map>\n    );\n  }\n}\n\nfunction MyLocation() {\n  return (\n    <div id=\"my-location-page\">\n      <Container>\n        <Row>\n          <Col>\n            <header>\n              <h1 className=\"display-4\">My Location</h1>\n              <p className=\"lead\">Marker shows where you are</p>\n            </header>\n          </Col>\n        </Row>\n      </Container>\n      <EventsExample />\n    </div>\n  );\n}\n\nexport default MyLocation;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Navbar,\n  Nav\n} from 'react-bootstrap';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Home from './Home';\nimport About from './About';\nimport MyLocation from './MyLocation';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"/\">Tcheq.me</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"/\">Home</Nav.Link>\n              <Nav.Link href=\"/my-location\">My location</Nav.Link>\n              <Nav.Link href=\"/about\">About</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/my-location\">\n            <MyLocation />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}